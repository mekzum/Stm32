


#define STK_CTRL	(*((volatile unsigned int *) 0xE000E010))
#define STK_LOAD	(*((volatile unsigned int *) 0xE000E014))
#define STK_VAL		(*((volatile unsigned int *) 0xE000E018))

#include <stdio.h>	 
#include "stm32f4xx.h"
#include "stm32f4xx_gpio.h"
#include "stm32f4xx_rcc.h"
#include "stm32f4xx_adc.h"
#include "stm32f4xx.h"
#include "stm32f429i_discovery.h"
#include "stm32f429i_discovery_lcd.h"
#include "stm32f4xx_spi.h"
unsigned int count_;
void delay_ms (int ms);
void LcdInit (void);
void LcdWriteInt (int line, int number);
void DmaInit (void);
void RandomInit (void);
int RandomCreate ();
int debug_c1;

char x,y,z;
uint16_t x_data,y_data,z_data;
uint8_t receive; 
void SysTickInit ()
{
	STK_LOAD = 0X00029040;		// 168E6/1000/2=168000 TICK TIME 1MS 
	STK_CTRL &= ~0x00010000;	// Count Flagi silelim, 
	STK_CTRL |= 0x00000007;		// int enb ve count enb yapalim, clk kaynagini AHB yapalim  
}
void SysTick_Handler ()
{
	count_++;
	STK_CTRL &= ~0x00010000;	// Count Flagi silelim 
	
}
char Source[1024];
char Target[1024];
void SystemInit ()
{
	unsigned int i;
	(*((int *) 0xE000ED88)) |= 0x0F00000; // Register write enable 
	for(i = 0; i < 0x00100000; i++);

	// OSC oturtma ve kurtarma rutini 
	RCC->CFGR |= 0x00009400;		// AHB ve APB hizlarini max degerlere set edelim 
	RCC->CR |= 0x00010000;			// HSE Xtal osc calismaya baslasin  
	while(!(RCC->CR & 0x00020000));

	// Xtal osc stabil hale gelsin 
	RCC->PLLCFGR = 0x07402A04;		// PLL katsayilarini M=4, N=150, P=2 ve Q=7 yapalim 150 Mhz  
	RCC->CR |= 0x01000000;			// PLL calismaya baslasin (Rehber Sayfa 95) 
	while(!(RCC->CR & 0x02000000));

	// Pll hazir oluncaya kadar bekle 
	FLASH->ACR = 0x00000605;		// Flash ROM icin 5 Wait state secelim ve ART yi aktif edelim (Rehber Sayfa 55) 
	RCC->CFGR |= 0x00000002;		// Sistem Clk u PLL uzerinden besleyelim 
	while((RCC->CFGR & 0x0000000F) != 0x0000000A);

	// Besleninceye kadar bekle 
	RCC->AHB1ENR |= 0x0000006F;		// GPIO A,B,C,D,F,G clock'u aktif edelim  
	GPIOG->MODER |= 0x14000000;		// G13,14 output 
	GPIOG->OSPEEDR = 0xFFFFFFFF;
	GPIOD->MODER = 0x55550000;		// GPIOD nin 15, 14, 13, 12, 11, 10, 9, 8 pinleri cikis tanimlandi (LEDler icin) 
	GPIOD->OSPEEDR = 0xFFFFFFFF;	// GPIOD nin tum cikislari en yuksek hizda kullanacagiz  
	GPIOA->MODER |= 0x00000000;    //A0 input mode (önemsiz)
	GPIOA->OSPEEDR = 0xFFFFFFFF;
	
	
		  GPIOF->MODER|=0xA8000; //F7,F8,F9 alternate fun. mode
       GPIOF->AFR[0]=0x50000000; //F7 set AF5	
       GPIOF->AFR[1]=0x55; //F8 and F9 alternate function AF5
       GPIOF->OSPEEDR |=0xFC000; 
       
       RCC->APB2ENR|=0x100000;        // SPI5 clk enable   //   GPIOE3 pinini output tanimlayalim (LIS302DL SPI/I2C secimi)   
       GPIOC->MODER|=0x00004;   //C1 output. C1 selected SPI on chip
      
       GPIOC->OSPEEDR |= 0x0C;      //Pin C1 High spees
       SPI5->CR1=0x000003FF;               // SPI5 8 bit, master , fulldublex vs 
       SPI5->CR2=0X0000; 
			 GPIOC->BSRRL=0x0002;                // GPIOC1=1; LIS302DL CS=1  
	     debug_c1= (GPIOC->ODR&0x2);
	
	
}
 
void Write(uint8_t adress,uint8_t data) 
{ 
	    adress=0x00 | adress;
      GPIOC->BSRRH=0x0002;           //reset CS=0 
	delay_ms(10);
	    while(!(SPI5->SR&0x2));  //TXE is empty?
      SPI5->DR=adress; 
	    while(!(SPI5->SR&0x1)); //RX is empty
	    receive=SPI5->DR;
	    while(!(SPI5->SR&0x2));  //TXE is empty?
      SPI5->DR=data; 
	    while(!(SPI5->SR&0x1)); //RX is empty
	    receive=SPI5->DR;
      GPIOC->BSRRL=0x0002;            // set CS=1 
}   
 
uint8_t Read(uint8_t adress) 
{ 
      
      GPIOC->BSRRH=0x0002;           //reset CS=0 
		delay_ms(10);
	    adress = 0x80 | adress;
	   // while(!(SPI5->SR&0x2));  //TXE is empty?
      SPI5->DR=adress; 
	    while(!(SPI5->SR&0x1)); //RX is empty
	    while(SPI5->SR&0x80);
	    receive=SPI5->DR;
	    LcdWriteInt(290,(int)receive);
	    while(!(SPI5->SR&0x2));  //TXE is empty?
      SPI5->DR=0x00; 
	    while(!(SPI5->SR&0x1)); //RX is empty
     	delay_ms(10);
	     receive=SPI5->DR;
      GPIOC->BSRRL=0x0002;            // set CS=1 
		  
  //  	LcdWriteInt(290,(int)receive);
	    
	    return SPI5->DR;
}   
int main ()
{
	SysTickInit();
	LcdInit();
	//DmaInit();
 
	volatile int i=0;
	LCD_SetFont(&Font12x12);
	LCD_SetTextColor(LCD_COLOR_BLUE2);
	LCD_DisplayStringLine(100,"DMA Target Elamanlari:");
	LCD_DisplayStringLine(150,"Rastgele Sayi:");
	LCD_SetTextColor(LCD_COLOR_BLACK);
	int ab=0;
	char who;   
 
			  delay_ms(1000);
				 if(Read(0x0F)==0xD4)   // Who are you ? 
       { 
          Write(0x20,0xF);  // Data Rate=100Hz, Full Scale=2g, Activate, x,y,z enable 
	        delay_ms(100);
          while(1) 
            { 
             
                x_data=Read(0x29); 
                y_data=Read(0x2B);
                z_data=Read(0x2D);
								 LCD_DisplayStringLine(220,"     ");
							  LCD_DisplayStringLine(240,"     ");
						  	LCD_DisplayStringLine(260,"     ");
							  LcdWriteInt(220,(int)x_data);
							  LcdWriteInt(240,(int)y_data);
						  	LcdWriteInt(260,(int)z_data);
							   delay_ms(1000);
							
									if((GPIOA->IDR&0x001)) //A0 button read 
		{
			while((GPIOA->IDR&0x001));  //Safety
		  ab++;
			LcdWriteInt(200,ab);
		} 
            }
						
						
       } 
							
		 }			
	
            
       
					
	
	
	  






void delay_ms (int ms)
{
	while(count_ < ms);
	count_ = 0;
	
}
void LcdInit ()
{

	// LCD initialization 
	LCD_Init();

	// LCD Layer initialization 
	LCD_LayerInit();

	// Enable the LTDC 
	LTDC_Cmd(ENABLE);

	// Set LCD foreground layer 
	LCD_SetLayer(LCD_FOREGROUND_LAYER);
	LCD_SetColors(LCD_COLOR_RED, LCD_COLOR_WHITE);
	LCD_Clear(LCD_COLOR_WHITE);
	LCD_SetTextColor(LCD_COLOR_RED);
	LCD_DisplayStringLine(0, " Oguz Emre");
	LCD_SetTextColor(LCD_COLOR_GREEN);
	LCD_DisplayStringLine(24, "oguzemre.net");
	LCD_SetTextColor(LCD_COLOR_BLUE);
	LCD_DisplayStringLine(48, " 2016");
	LCD_SetTextColor(LCD_COLOR_BLACK);
	LCD_DisplayStringLine(72, "       C*");
	
}
void LcdWriteInt (int line, int number)
{
 int num=(int)number;

	uint8_t text[50];
	sprintf((char *) text, "%d", num);		// a int text charina geliyor 
	LCD_DisplayStringLine(line,text);			// text yazdiyorz
	
}
void DmaInit ()
{
	
	
	
	volatile int i;
	// Source alanina datalarimizi koyalim 
		for(i = 0; i < 1024; i++) Source[i] = i;
	RCC->AHB1ENR |= 0x00400000; // DMA2 clock'u aktif edelim  
	while(DMA2_Stream0->CR & 1);

	// DMA 0 kanalinin isi varsa bitmesini bekleyelim 
	DMA2_Stream0->PAR = (int) &Source[0];	// Source array dan datalari alacagiz 
	DMA2_Stream0->M0AR = (int) &Target[0];	// Target array a datalari tasiyacagiz 
	DMA2_Stream0->NDTR = 1024;	//  
	DMA2_Stream0->CR = 0x00A00680;
	DMA2_Stream0->CR |= 1;		// Transferi baslat 
	
	
	// Artik biz kendi yolumuza DMA kendi yoluna  
	delay_ms(100);
	while(DMA2_Stream0->CR & 1); // DMA2 0 kanalinin isini bitirmediyse bekleyelim 
}

